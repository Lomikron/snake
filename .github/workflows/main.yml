name: Build and Deploy
on: 
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
permissions:
  contents: write
jobs:
  build:
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          npm install wasm4
          wget https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz
          tar -xf binaryen-version_110-x86_64-linux.tar.gz
        
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
    
      - name: Optimize and Bundle Cartridge
        run: |
          mkdir build
          ./binaryen-version_110/bin/wasm-opt target/wasm32-unknown-unknown/release/cart.wasm -o build/cart.wasm -Oz --strip-dwarf --strip-producers --zero-filled-memory
          npx w4 bundle build/cart.wasm --title "Snake" --html public/index.html --linux build/snake-linux --windows build/snake.exe

      - name: Archive build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/

      - name: Archive pages artifact
        shell: bash
        run: |
          tar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
        env:
          INPUT_PATH: public/

      - name: Upload pages artifact
        uses: actions/upload-artifact@main
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          retention-days: 1

  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download cartridge artifact
        uses: actions/download-artifact@v3
        with:
          name: build
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload Cartridge
        id: upload-cartridge 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/cart.wasm
          asset_name: snake.wasm
          asset_content_type: application/wasm

      - name: Upload Linux executable
        id: upload-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/snake-linux
          asset_name: snake-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows executable
        id: upload-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/snake.exe
          asset_name: snake.exe
          asset_content_type: application/vnd.microsoft.portable-executable
